const fs = require("fs/promises");
const path = require("path");

const main = async () => {
  const registryData = await fs.readFile(
    path.resolve(__dirname, "./registry.json")
  );

  for (const entry of JSON.parse(registryData.toString("utf-8"))) {
    console.info(
      `
Updating UNTDID ${entry.id}
from ${entry.source}
`
    );

    const res = await fetch(new URL(entry.source).toString(), {
      method: "GET",
    });

    const data = await res.json();

    if (!data["daten"]) {
      throw new Error("Invalid response");
    }

    const mappedData = data["daten"].map(([code, name, description]) => {
      const formattedCode = JSON.stringify(code);
      const formattedName = !!name ? JSON.stringify(name) : "undefined";
      const formattedDescription = !!description
        ? JSON.stringify(description)
        : "undefined";

      return `
\t{
\t\tcode:${
        formattedCode.length >= 80 - 8
          ? `\n\t\t\t${formattedCode}`
          : ` ${formattedCode}`
      },
\t\tname:${
        formattedName.length >= 80 - 8
          ? `\n\t\t\t${formattedName}`
          : ` ${formattedName}`
      },
\t\tdescription:${
        formattedDescription.length >= 80 - 15
          ? `\n\t\t\t${formattedDescription}`
          : ` ${formattedDescription}`
      },
\t},`;
    });

    const content = `export type Untdid${entry.id}Definition = {
\tcode: string;
\tname?: string;
\tdescription?: string;
};

export type Untdid${entry.id}Code = (typeof UNTDID_${entry.id})[number]["code"];

/**
 * Generated by ${"`"}scripts/untdid/update.js${"`"} on ${new Date().toUTCString()}
 * 
 * @see ${entry.see}
 */
export const UNTDID_${entry.id} = [${mappedData.join("")}${
      mappedData.length > 0 ? "\n" : ""
    }] as const satisfies Untdid${entry.id}Definition[];
`;

    await fs.writeFile(
      `./packages/node-zugferd/src/codelists/untdid/${entry.id}.ts`,
      content
    );

    console.log(`Finished Updating UNTDID ${entry.id}`);
  }
};

void main();
